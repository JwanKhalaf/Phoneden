// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Phoneden.DataAccess.Context;

namespace Phoneden.DataAccess.Migrations
{
  [DbContext(typeof(PdContext))]
  partial class PdContextModelSnapshot : ModelSnapshot
  {
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
          .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
          .HasAnnotation("Relational:MaxIdentifierLength", 63);

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
          {
            b.Property<string>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnName("concurrency_stamp");

            b.Property<string>("Name")
                      .HasColumnName("name")
                      .HasMaxLength(127);

            b.Property<string>("NormalizedName")
                      .HasColumnName("normalized_name")
                      .HasMaxLength(127);

            b.HasKey("Id")
                      .HasName("pk_asp_net_roles");

            b.HasIndex("NormalizedName")
                      .IsUnique()
                      .HasName("role_name_index");

            b.ToTable("asp_net_roles");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<string>("ClaimType")
                      .HasColumnName("claim_type");

            b.Property<string>("ClaimValue")
                      .HasColumnName("claim_value");

            b.Property<string>("RoleId")
                      .IsRequired()
                      .HasColumnName("role_id");

            b.HasKey("Id")
                      .HasName("pk_asp_net_role_claims");

            b.HasIndex("RoleId")
                      .HasName("ix_asp_net_role_claims_role_id");

            b.ToTable("asp_net_role_claims");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<string>("ClaimType")
                      .HasColumnName("claim_type");

            b.Property<string>("ClaimValue")
                      .HasColumnName("claim_value");

            b.Property<string>("UserId")
                      .IsRequired()
                      .HasColumnName("user_id");

            b.HasKey("Id")
                      .HasName("pk_asp_net_user_claims");

            b.HasIndex("UserId")
                      .HasName("ix_asp_net_user_claims_user_id");

            b.ToTable("asp_net_user_claims");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
          {
            b.Property<string>("LoginProvider")
                      .HasColumnName("login_provider")
                      .HasMaxLength(127);

            b.Property<string>("ProviderKey")
                      .HasColumnName("provider_key")
                      .HasMaxLength(127);

            b.Property<string>("ProviderDisplayName")
                      .HasColumnName("provider_display_name");

            b.Property<string>("UserId")
                      .IsRequired()
                      .HasColumnName("user_id");

            b.HasKey("LoginProvider", "ProviderKey")
                      .HasName("pk_asp_net_user_logins");

            b.HasIndex("UserId")
                      .HasName("ix_asp_net_user_logins_user_id");

            b.ToTable("asp_net_user_logins");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
          {
            b.Property<string>("UserId")
                      .HasColumnName("user_id")
                      .HasMaxLength(127);

            b.Property<string>("RoleId")
                      .HasColumnName("role_id")
                      .HasMaxLength(127);

            b.HasKey("UserId", "RoleId")
                      .HasName("pk_asp_net_user_roles");

            b.HasIndex("RoleId")
                      .HasName("ix_asp_net_user_roles_role_id");

            b.ToTable("asp_net_user_roles");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
          {
            b.Property<string>("UserId")
                      .HasColumnName("user_id")
                      .HasMaxLength(127);

            b.Property<string>("LoginProvider")
                      .HasColumnName("login_provider")
                      .HasMaxLength(127);

            b.Property<string>("Name")
                      .HasColumnName("name")
                      .HasMaxLength(127);

            b.Property<string>("Value")
                      .HasColumnName("value");

            b.HasKey("UserId", "LoginProvider", "Name")
                      .HasName("pk_asp_net_user_tokens");

            b.ToTable("asp_net_user_tokens");
          });

      modelBuilder.Entity("Phoneden.Entities.Address", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<string>("AddressLine1")
                      .HasColumnName("address_line1");

            b.Property<string>("AddressLine2")
                      .HasColumnName("address_line2");

            b.Property<string>("Area")
                      .HasColumnName("area");

            b.Property<int>("BusinessId")
                      .HasColumnName("business_id");

            b.Property<string>("City")
                      .HasColumnName("city");

            b.Property<string>("Country")
                      .HasColumnName("country");

            b.Property<string>("County")
                      .HasColumnName("county");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<string>("PostCode")
                      .HasColumnName("post_code");

            b.HasKey("Id")
                      .HasName("pk_addresses");

            b.HasIndex("BusinessId")
                      .HasName("ix_addresses_business_id");

            b.ToTable("addresses");
          });

      modelBuilder.Entity("Phoneden.Entities.ApplicationUser", b =>
          {
            b.Property<string>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<int>("AccessFailedCount")
                      .HasColumnName("access_failed_count");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnName("concurrency_stamp");

            b.Property<string>("DisplayUsername")
                      .HasColumnName("display_username");

            b.Property<string>("Email")
                      .HasColumnName("email")
                      .HasMaxLength(127);

            b.Property<bool>("EmailConfirmed")
                      .HasColumnName("email_confirmed");

            b.Property<bool>("LockoutEnabled")
                      .HasColumnName("lockout_enabled");

            b.Property<DateTimeOffset?>("LockoutEnd")
                      .HasColumnName("lockout_end");

            b.Property<string>("NormalizedEmail")
                      .HasColumnName("normalized_email")
                      .HasMaxLength(127);

            b.Property<string>("NormalizedUserName")
                      .HasColumnName("normalized_user_name")
                      .HasMaxLength(127);

            b.Property<string>("PasswordHash")
                      .HasColumnName("password_hash");

            b.Property<string>("PhoneNumber")
                      .HasColumnName("phone_number");

            b.Property<bool>("PhoneNumberConfirmed")
                      .HasColumnName("phone_number_confirmed");

            b.Property<string>("SecurityStamp")
                      .HasColumnName("security_stamp");

            b.Property<bool>("TwoFactorEnabled")
                      .HasColumnName("two_factor_enabled");

            b.Property<string>("UserName")
                      .HasColumnName("user_name")
                      .HasMaxLength(127);

            b.HasKey("Id")
                      .HasName("pk_asp_net_users");

            b.HasIndex("NormalizedEmail")
                      .HasName("email_index");

            b.HasIndex("NormalizedUserName")
                      .IsUnique()
                      .HasName("user_name_index");

            b.ToTable("asp_net_users");
          });

      modelBuilder.Entity("Phoneden.Entities.Brand", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<string>("Name")
                      .HasColumnName("name");

            b.HasKey("Id")
                      .HasName("pk_brands");

            b.ToTable("brands");
          });

      modelBuilder.Entity("Phoneden.Entities.Business", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<string>("Code")
                      .HasColumnName("code");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<string>("Description")
                      .HasColumnName("description");

            b.Property<string>("Discriminator")
                      .IsRequired()
                      .HasColumnName("discriminator");

            b.Property<string>("Email")
                      .HasColumnName("email");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<string>("Name")
                      .HasColumnName("name");

            b.Property<string>("Phone")
                      .HasColumnName("phone");

            b.Property<string>("Website")
                      .HasColumnName("website");

            b.HasKey("Id")
                      .HasName("pk_businesses");

            b.ToTable("businesses");

            b.HasDiscriminator<string>("Discriminator").HasValue("Business");
          });

      modelBuilder.Entity("Phoneden.Entities.Category", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<string>("Name")
                      .HasColumnName("name");

            b.Property<int?>("ParentCategoryId")
                      .HasColumnName("parent_category_id");

            b.HasKey("Id")
                      .HasName("pk_categories");

            b.HasIndex("ParentCategoryId")
                      .HasName("ix_categories_parent_category_id");

            b.ToTable("categories");
          });

      modelBuilder.Entity("Phoneden.Entities.Contact", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<int>("BusinessId")
                      .HasColumnName("business_id");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<string>("Department")
                      .HasColumnName("department");

            b.Property<string>("Email")
                      .HasColumnName("email");

            b.Property<string>("FirstName")
                      .HasColumnName("first_name");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<string>("LastName")
                      .HasColumnName("last_name");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<string>("Phone")
                      .HasColumnName("phone");

            b.Property<string>("Title")
                      .HasColumnName("title");

            b.HasKey("Id")
                      .HasName("pk_contacts");

            b.HasIndex("BusinessId")
                      .HasName("ix_contacts_business_id");

            b.ToTable("contacts");
          });

      modelBuilder.Entity("Phoneden.Entities.Expense", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<decimal>("Amount")
                      .HasColumnName("amount")
                      .HasColumnType("decimal(19, 8)");

            b.Property<string>("ApplicationUserId")
                      .HasColumnName("application_user_id");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<DateTime>("Date")
                      .HasColumnName("date");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<int>("Method")
                      .HasColumnName("method");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<string>("Reason")
                      .HasColumnName("reason");

            b.HasKey("Id")
                      .HasName("pk_expenses");

            b.HasIndex("ApplicationUserId")
                      .HasName("ix_expenses_application_user_id");

            b.ToTable("expenses");
          });

      modelBuilder.Entity("Phoneden.Entities.Partner", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<string>("AddressLine1")
                      .HasColumnName("address_line1");

            b.Property<string>("AddressLine2")
                      .HasColumnName("address_line2");

            b.Property<string>("Area")
                      .HasColumnName("area");

            b.Property<string>("City")
                      .HasColumnName("city");

            b.Property<string>("Country")
                      .HasColumnName("country");

            b.Property<string>("County")
                      .HasColumnName("county");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<string>("Email")
                      .HasColumnName("email");

            b.Property<string>("FirstName")
                      .HasColumnName("first_name");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<string>("LastName")
                      .HasColumnName("last_name");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<string>("Phone")
                      .HasColumnName("phone");

            b.Property<string>("PostCode")
                      .HasColumnName("post_code");

            b.Property<string>("Title")
                      .HasColumnName("title");

            b.HasKey("Id")
                      .HasName("pk_partners");

            b.ToTable("partners");
          });

      modelBuilder.Entity("Phoneden.Entities.Product", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<int>("AlertThreshold")
                      .HasColumnName("alert_threshold");

            b.Property<string>("Barcode")
                      .HasColumnName("barcode");

            b.Property<int>("BrandId")
                      .HasColumnName("brand_id");

            b.Property<int>("CategoryId")
                      .HasColumnName("category_id");

            b.Property<int>("Colour")
                      .HasColumnName("colour");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<string>("Description")
                      .HasColumnName("description");

            b.Property<string>("ImagePath")
                      .HasColumnName("image_path");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<string>("Name")
                      .HasColumnName("name");

            b.Property<int>("QualityId")
                      .HasColumnName("quality_id");

            b.Property<int>("Quantity")
                      .HasColumnName("quantity");

            b.Property<string>("Sku")
                      .HasColumnName("sku");

            b.Property<decimal>("UnitCostPrice")
                      .HasColumnName("unit_cost_price")
                      .HasColumnType("decimal(19, 8)");

            b.Property<decimal>("UnitSellingPrice")
                      .HasColumnName("unit_selling_price")
                      .HasColumnType("decimal(19, 8)");

            b.HasKey("Id")
                      .HasName("pk_products");

            b.HasIndex("BrandId")
                      .HasName("ix_products_brand_id");

            b.HasIndex("CategoryId")
                      .HasName("ix_products_category_id");

            b.HasIndex("QualityId")
                      .HasName("ix_products_quality_id");

            b.ToTable("products");
          });

      modelBuilder.Entity("Phoneden.Entities.PurchaseOrder", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<DateTime>("Date")
                      .HasColumnName("date");

            b.Property<decimal>("Discount")
                      .HasColumnName("discount")
                      .HasColumnType("decimal(19, 8)");

            b.Property<decimal>("ImportDuty")
                      .HasColumnName("import_duty")
                      .HasColumnType("decimal(19, 8)");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<decimal>("ShippingConversionRate")
                      .HasColumnName("shipping_conversion_rate")
                      .HasColumnType("decimal(19, 8)");

            b.Property<decimal>("ShippingCost")
                      .HasColumnName("shipping_cost")
                      .HasColumnType("decimal(19, 8)");

            b.Property<int>("ShippingCurrency")
                      .HasColumnName("shipping_currency");

            b.Property<int>("Status")
                      .HasColumnName("status");

            b.Property<int>("SupplierId")
                      .HasColumnName("supplier_id");

            b.Property<int>("SupplierOrderNumber")
                      .HasColumnName("supplier_order_number");

            b.Property<decimal>("Vat")
                      .HasColumnName("vat")
                      .HasColumnType("decimal(19, 8)");

            b.HasKey("Id")
                      .HasName("pk_purchase_orders");

            b.HasIndex("SupplierId")
                      .HasName("ix_purchase_orders_supplier_id");

            b.ToTable("purchase_orders");
          });

      modelBuilder.Entity("Phoneden.Entities.PurchaseOrderInvoice", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<decimal>("Amount")
                      .HasColumnName("amount")
                      .HasColumnType("decimal(19, 8)");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<DateTime>("DueDate")
                      .HasColumnName("due_date");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<int>("PurchaseOrderId")
                      .HasColumnName("purchase_order_id");

            b.Property<int>("Status")
                      .HasColumnName("status");

            b.HasKey("Id")
                      .HasName("pk_purchase_order_invoices");

            b.HasIndex("PurchaseOrderId")
                      .IsUnique()
                      .HasName("ix_purchase_order_invoices_purchase_order_id");

            b.ToTable("purchase_order_invoices");
          });

      modelBuilder.Entity("Phoneden.Entities.PurchaseOrderInvoiceLineItem", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<decimal>("ConversionRate")
                      .HasColumnName("conversion_rate");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<int>("Currency")
                      .HasColumnName("currency");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<decimal>("Price")
                      .HasColumnName("price");

            b.Property<string>("ProductColour")
                      .HasColumnName("product_colour");

            b.Property<int>("ProductId")
                      .HasColumnName("product_id");

            b.Property<string>("ProductName")
                      .HasColumnName("product_name");

            b.Property<string>("ProductQuality")
                      .HasColumnName("product_quality");

            b.Property<int>("PurchaseOrderInvoiceId")
                      .HasColumnName("purchase_order_invoice_id");

            b.Property<int>("Quantity")
                      .HasColumnName("quantity");

            b.HasKey("Id")
                      .HasName("pk_purchase_order_invoice_line_items");

            b.HasIndex("PurchaseOrderInvoiceId")
                      .HasName("ix_purchase_order_invoice_line_items_purchase_order_invoice_id");

            b.ToTable("purchase_order_invoice_line_items");
          });

      modelBuilder.Entity("Phoneden.Entities.PurchaseOrderInvoicePayment", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<decimal>("Amount")
                      .HasColumnName("amount")
                      .HasColumnType("decimal(19, 8)");

            b.Property<decimal>("ConversionRate")
                      .HasColumnName("conversion_rate")
                      .HasColumnType("decimal(19, 8)");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<int>("Currency")
                      .HasColumnName("currency");

            b.Property<DateTime>("Date")
                      .HasColumnName("date");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<int>("Method")
                      .HasColumnName("method");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<int>("PurchaseOrderInvoiceId")
                      .HasColumnName("purchase_order_invoice_id");

            b.Property<string>("Reference")
                      .HasColumnName("reference");

            b.HasKey("Id")
                      .HasName("pk_purchase_order_invoice_payments");

            b.HasIndex("PurchaseOrderInvoiceId")
                      .HasName("ix_purchase_order_invoice_payments_purchase_order_invoice_id");

            b.ToTable("purchase_order_invoice_payments");
          });

      modelBuilder.Entity("Phoneden.Entities.PurchaseOrderLineItem", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<string>("Barcode")
                      .HasColumnName("barcode");

            b.Property<string>("Colour")
                      .HasColumnName("colour");

            b.Property<decimal>("ConversionRate")
                      .HasColumnName("conversion_rate")
                      .HasColumnType("decimal(19, 8)");

            b.Property<decimal>("Cost")
                      .HasColumnName("cost");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<int>("Currency")
                      .HasColumnName("currency");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<string>("Name")
                      .HasColumnName("name");

            b.Property<decimal>("Price")
                      .HasColumnName("price")
                      .HasColumnType("decimal(19, 8)");

            b.Property<int>("ProductId")
                      .HasColumnName("product_id");

            b.Property<int>("PurchaseOrderId")
                      .HasColumnName("purchase_order_id");

            b.Property<string>("Quality")
                      .HasColumnName("quality");

            b.Property<int>("Quantity")
                      .HasColumnName("quantity");

            b.HasKey("Id")
                      .HasName("pk_purchase_order_line_items");

            b.HasIndex("ProductId")
                      .HasName("ix_purchase_order_line_items_product_id");

            b.HasIndex("PurchaseOrderId")
                      .HasName("ix_purchase_order_line_items_purchase_order_id");

            b.ToTable("purchase_order_line_items");
          });

      modelBuilder.Entity("Phoneden.Entities.PurchaseOrderNote", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<int>("PurchaseOrderId")
                      .HasColumnName("purchase_order_id");

            b.Property<string>("Text")
                      .HasColumnName("text");

            b.HasKey("Id")
                      .HasName("pk_purchase_order_note");

            b.HasIndex("PurchaseOrderId")
                      .HasName("ix_purchase_order_note_purchase_order_id");

            b.ToTable("purchase_order_note");
          });

      modelBuilder.Entity("Phoneden.Entities.Quality", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<string>("Name")
                      .HasColumnName("name");

            b.HasKey("Id")
                      .HasName("pk_qualities");

            b.ToTable("qualities");
          });

      modelBuilder.Entity("Phoneden.Entities.SaleOrder", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<int>("CustomerId")
                      .HasColumnName("customer_id");

            b.Property<DateTime>("Date")
                      .HasColumnName("date");

            b.Property<decimal>("Discount")
                      .HasColumnName("discount")
                      .HasColumnType("decimal(19, 8)");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<decimal>("PostageCost")
                      .HasColumnName("postage_cost")
                      .HasColumnType("decimal(19, 8)");

            b.Property<int>("Status")
                      .HasColumnName("status");

            b.HasKey("Id")
                      .HasName("pk_sale_orders");

            b.HasIndex("CustomerId")
                      .HasName("ix_sale_orders_customer_id");

            b.ToTable("sale_orders");
          });

      modelBuilder.Entity("Phoneden.Entities.SaleOrderInvoice", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<decimal>("Amount")
                      .HasColumnName("amount")
                      .HasColumnType("decimal(19, 8)");

            b.Property<decimal>("AmountToBePaidOnCredit")
                      .HasColumnName("amount_to_be_paid_on_credit")
                      .HasColumnType("decimal(19, 8)");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<DateTime>("DueDate")
                      .HasColumnName("due_date");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<int>("SaleOrderId")
                      .HasColumnName("sale_order_id");

            b.Property<int>("Status")
                      .HasColumnName("status");

            b.HasKey("Id")
                      .HasName("pk_sale_order_invoices");

            b.HasIndex("SaleOrderId")
                      .IsUnique()
                      .HasName("ix_sale_order_invoices_sale_order_id");

            b.ToTable("sale_order_invoices");
          });

      modelBuilder.Entity("Phoneden.Entities.SaleOrderInvoiceLineItem", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<decimal>("Cost")
                      .HasColumnName("cost");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<decimal>("Price")
                      .HasColumnName("price");

            b.Property<string>("ProductColour")
                      .HasColumnName("product_colour");

            b.Property<int>("ProductId")
                      .HasColumnName("product_id");

            b.Property<string>("ProductName")
                      .HasColumnName("product_name");

            b.Property<string>("ProductQuality")
                      .HasColumnName("product_quality");

            b.Property<int>("Quantity")
                      .HasColumnName("quantity");

            b.Property<int>("SaleOrderInvoiceId")
                      .HasColumnName("sale_order_invoice_id");

            b.HasKey("Id")
                      .HasName("pk_sale_order_invoice_line_items");

            b.HasIndex("SaleOrderInvoiceId")
                      .HasName("ix_sale_order_invoice_line_items_sale_order_invoice_id");

            b.ToTable("sale_order_invoice_line_items");
          });

      modelBuilder.Entity("Phoneden.Entities.SaleOrderInvoicePayment", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<decimal>("Amount")
                      .HasColumnName("amount")
                      .HasColumnType("decimal(19, 8)");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<DateTime>("Date")
                      .HasColumnName("date");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<int>("Method")
                      .HasColumnName("method");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<string>("Reference")
                      .HasColumnName("reference");

            b.Property<int>("SaleOrderInvoiceId")
                      .HasColumnName("sale_order_invoice_id");

            b.HasKey("Id")
                      .HasName("pk_sale_order_invoice_payments");

            b.HasIndex("SaleOrderInvoiceId")
                      .HasName("ix_sale_order_invoice_payments_sale_order_invoice_id");

            b.ToTable("sale_order_invoice_payments");
          });

      modelBuilder.Entity("Phoneden.Entities.SaleOrderLineItem", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<string>("Barcode")
                      .HasColumnName("barcode");

            b.Property<string>("Colour")
                      .HasColumnName("colour");

            b.Property<decimal>("ConversionRate")
                      .HasColumnName("conversion_rate")
                      .HasColumnType("decimal(19, 8)");

            b.Property<decimal>("Cost")
                      .HasColumnName("cost");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<int>("Currency")
                      .HasColumnName("currency");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<string>("Name")
                      .HasColumnName("name");

            b.Property<decimal>("Price")
                      .HasColumnName("price")
                      .HasColumnType("decimal(19, 8)");

            b.Property<int>("ProductId")
                      .HasColumnName("product_id");

            b.Property<string>("Quality")
                      .HasColumnName("quality");

            b.Property<int>("Quantity")
                      .HasColumnName("quantity");

            b.Property<int>("SaleOrderId")
                      .HasColumnName("sale_order_id");

            b.HasKey("Id")
                      .HasName("pk_sale_order_line_items");

            b.HasIndex("ProductId")
                      .HasName("ix_sale_order_line_items_product_id");

            b.HasIndex("SaleOrderId")
                      .HasName("ix_sale_order_line_items_sale_order_id");

            b.ToTable("sale_order_line_items");
          });

      modelBuilder.Entity("Phoneden.Entities.SaleOrderNote", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<int>("PurchaseOrderId")
                      .HasColumnName("purchase_order_id");

            b.Property<int?>("SaleOrderId")
                      .HasColumnName("sale_order_id");

            b.Property<string>("Text")
                      .HasColumnName("text");

            b.HasKey("Id")
                      .HasName("pk_sale_order_note");

            b.HasIndex("PurchaseOrderId")
                      .HasName("ix_sale_order_note_purchase_order_id");

            b.HasIndex("SaleOrderId")
                      .HasName("ix_sale_order_note_sale_order_id");

            b.ToTable("sale_order_note");
          });

      modelBuilder.Entity("Phoneden.Entities.SaleOrderReturn", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnName("id");

            b.Property<DateTime>("CreatedOn")
                      .HasColumnName("created_on");

            b.Property<DateTime>("Date")
                      .HasColumnName("date");

            b.Property<string>("Description")
                      .HasColumnName("description");

            b.Property<bool>("IsDeleted")
                      .HasColumnName("is_deleted");

            b.Property<bool>("IsVerified")
                      .HasColumnName("is_verified");

            b.Property<DateTime?>("ModifiedOn")
                      .HasColumnName("modified_on");

            b.Property<int>("ProductId")
                      .HasColumnName("product_id");

            b.Property<int>("Quantity")
                      .HasColumnName("quantity");

            b.Property<int>("Resolution")
                      .HasColumnName("resolution");

            b.Property<int>("SaleOrderInvoiceId")
                      .HasColumnName("sale_order_invoice_id");

            b.Property<decimal>("Value")
                      .HasColumnName("value")
                      .HasColumnType("decimal(19, 8)");

            b.HasKey("Id")
                      .HasName("pk_sale_order_returns");

            b.HasIndex("ProductId")
                      .HasName("ix_sale_order_returns_product_id");

            b.HasIndex("SaleOrderInvoiceId")
                      .HasName("ix_sale_order_returns_sale_order_invoice_id");

            b.ToTable("sale_order_returns");
          });

      modelBuilder.Entity("Phoneden.Entities.Customer", b =>
          {
            b.HasBaseType("Phoneden.Entities.Business");

            b.Property<decimal>("AllowedCredit")
                      .HasColumnName("allowed_credit")
                      .HasColumnType("decimal(19, 8)");

            b.Property<decimal>("CreditUsed")
                      .HasColumnName("credit_used")
                      .HasColumnType("decimal(19, 8)");

            b.Property<int>("NumberOfDaysAllowedToBeOnMaxedOutCredit")
                      .HasColumnName("number_of_days_allowed_to_be_on_maxed_out_credit");

            b.ToTable("businesses");

            b.HasDiscriminator().HasValue("Customer");
          });

      modelBuilder.Entity("Phoneden.Entities.Supplier", b =>
          {
            b.HasBaseType("Phoneden.Entities.Business");

            b.ToTable("businesses");

            b.HasDiscriminator().HasValue("Supplier");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
          {
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
          {
            b.HasOne("Phoneden.Entities.ApplicationUser")
                      .WithMany()
                      .HasForeignKey("UserId")
                      .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
          {
            b.HasOne("Phoneden.Entities.ApplicationUser")
                      .WithMany()
                      .HasForeignKey("UserId")
                      .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
          {
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                      .OnDelete(DeleteBehavior.Cascade);

            b.HasOne("Phoneden.Entities.ApplicationUser")
                      .WithMany()
                      .HasForeignKey("UserId")
                      .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
          {
            b.HasOne("Phoneden.Entities.ApplicationUser")
                      .WithMany()
                      .HasForeignKey("UserId")
                      .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Phoneden.Entities.Address", b =>
          {
            b.HasOne("Phoneden.Entities.Business", "Business")
                      .WithMany("Addresses")
                      .HasForeignKey("BusinessId")
                      .HasConstraintName("fk_addresses_businesses_business_id")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Phoneden.Entities.Category", b =>
          {
            b.HasOne("Phoneden.Entities.Category", "ParentCategory")
                      .WithMany()
                      .HasForeignKey("ParentCategoryId")
                      .HasConstraintName("fk_categories_categories_parent_category_id");
          });

      modelBuilder.Entity("Phoneden.Entities.Contact", b =>
          {
            b.HasOne("Phoneden.Entities.Business", "Business")
                      .WithMany("Contacts")
                      .HasForeignKey("BusinessId")
                      .HasConstraintName("fk_contacts_businesses_business_id")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Phoneden.Entities.Expense", b =>
          {
            b.HasOne("Phoneden.Entities.ApplicationUser", "User")
                      .WithMany()
                      .HasForeignKey("ApplicationUserId")
                      .HasConstraintName("fk_expenses_asp_net_users_application_user_id");
          });

      modelBuilder.Entity("Phoneden.Entities.Product", b =>
          {
            b.HasOne("Phoneden.Entities.Brand", "Brand")
                      .WithMany()
                      .HasForeignKey("BrandId")
                      .HasConstraintName("fk_products_brands_brand_id")
                      .OnDelete(DeleteBehavior.Cascade);

            b.HasOne("Phoneden.Entities.Category", "Category")
                      .WithMany("Products")
                      .HasForeignKey("CategoryId")
                      .HasConstraintName("fk_products_categories_category_id")
                      .OnDelete(DeleteBehavior.Cascade);

            b.HasOne("Phoneden.Entities.Quality", "Quality")
                      .WithMany()
                      .HasForeignKey("QualityId")
                      .HasConstraintName("fk_products_qualities_quality_id")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Phoneden.Entities.PurchaseOrder", b =>
          {
            b.HasOne("Phoneden.Entities.Supplier", "Supplier")
                      .WithMany("PurchaseOrders")
                      .HasForeignKey("SupplierId")
                      .HasConstraintName("fk_purchase_orders_businesses_supplier_id")
                      .OnDelete(DeleteBehavior.Restrict);
          });

      modelBuilder.Entity("Phoneden.Entities.PurchaseOrderInvoice", b =>
          {
            b.HasOne("Phoneden.Entities.PurchaseOrder", "PurchaseOrder")
                      .WithOne("Invoice")
                      .HasForeignKey("Phoneden.Entities.PurchaseOrderInvoice", "PurchaseOrderId")
                      .HasConstraintName("fk_purchase_order_invoices_purchase_orders_purchase_order_id")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Phoneden.Entities.PurchaseOrderInvoiceLineItem", b =>
          {
            b.HasOne("Phoneden.Entities.PurchaseOrderInvoice", "PurchaseOrderInvoice")
                      .WithMany("InvoicedLineItems")
                      .HasForeignKey("PurchaseOrderInvoiceId")
                      .HasConstraintName("fk_purchase_order_invoice_line_items_purchase_order_invoices_p~")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Phoneden.Entities.PurchaseOrderInvoicePayment", b =>
          {
            b.HasOne("Phoneden.Entities.PurchaseOrderInvoice", "PurchaseOrderInvoice")
                      .WithMany("Payments")
                      .HasForeignKey("PurchaseOrderInvoiceId")
                      .HasConstraintName("fk_purchase_order_invoice_payments_purchase_order_invoices_pur~")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Phoneden.Entities.PurchaseOrderLineItem", b =>
          {
            b.HasOne("Phoneden.Entities.Product", "Product")
                      .WithMany()
                      .HasForeignKey("ProductId")
                      .HasConstraintName("fk_purchase_order_line_items_products_product_id")
                      .OnDelete(DeleteBehavior.Cascade);

            b.HasOne("Phoneden.Entities.PurchaseOrder", "PurchaseOrder")
                      .WithMany("LineItems")
                      .HasForeignKey("PurchaseOrderId")
                      .HasConstraintName("fk_purchase_order_line_items_purchase_orders_purchase_order_id")
                      .OnDelete(DeleteBehavior.Restrict);
          });

      modelBuilder.Entity("Phoneden.Entities.PurchaseOrderNote", b =>
          {
            b.HasOne("Phoneden.Entities.PurchaseOrder", "PurchaseOrder")
                      .WithMany("Notes")
                      .HasForeignKey("PurchaseOrderId")
                      .HasConstraintName("fk_purchase_order_note_purchase_orders_purchase_order_id")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Phoneden.Entities.SaleOrder", b =>
          {
            b.HasOne("Phoneden.Entities.Customer", "Customer")
                      .WithMany("SaleOrders")
                      .HasForeignKey("CustomerId")
                      .HasConstraintName("fk_sale_orders_businesses_customer_id")
                      .OnDelete(DeleteBehavior.Restrict);
          });

      modelBuilder.Entity("Phoneden.Entities.SaleOrderInvoice", b =>
          {
            b.HasOne("Phoneden.Entities.SaleOrder", "SaleOrder")
                      .WithOne("Invoice")
                      .HasForeignKey("Phoneden.Entities.SaleOrderInvoice", "SaleOrderId")
                      .HasConstraintName("fk_sale_order_invoices_sale_orders_sale_order_id")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Phoneden.Entities.SaleOrderInvoiceLineItem", b =>
          {
            b.HasOne("Phoneden.Entities.SaleOrderInvoice", "SaleOrderInvoice")
                      .WithMany("InvoicedLineItems")
                      .HasForeignKey("SaleOrderInvoiceId")
                      .HasConstraintName("fk_sale_order_invoice_line_items_sale_order_invoices_sale_orde~")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Phoneden.Entities.SaleOrderInvoicePayment", b =>
          {
            b.HasOne("Phoneden.Entities.SaleOrderInvoice", "SaleOrderInvoice")
                      .WithMany("Payments")
                      .HasForeignKey("SaleOrderInvoiceId")
                      .HasConstraintName("fk_sale_order_invoice_payments_sale_order_invoices_sale_order_~")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Phoneden.Entities.SaleOrderLineItem", b =>
          {
            b.HasOne("Phoneden.Entities.Product", "Product")
                      .WithMany()
                      .HasForeignKey("ProductId")
                      .HasConstraintName("fk_sale_order_line_items_products_product_id")
                      .OnDelete(DeleteBehavior.Cascade);

            b.HasOne("Phoneden.Entities.SaleOrder", "SaleOrder")
                      .WithMany("LineItems")
                      .HasForeignKey("SaleOrderId")
                      .HasConstraintName("fk_sale_order_line_items_sale_orders_sale_order_id")
                      .OnDelete(DeleteBehavior.Restrict);
          });

      modelBuilder.Entity("Phoneden.Entities.SaleOrderNote", b =>
          {
            b.HasOne("Phoneden.Entities.PurchaseOrder", "PurchaseOrder")
                      .WithMany()
                      .HasForeignKey("PurchaseOrderId")
                      .HasConstraintName("fk_sale_order_note_purchase_orders_purchase_order_id")
                      .OnDelete(DeleteBehavior.Cascade);

            b.HasOne("Phoneden.Entities.SaleOrder")
                      .WithMany("Notes")
                      .HasForeignKey("SaleOrderId")
                      .HasConstraintName("fk_sale_order_note_sale_orders_sale_order_id");
          });

      modelBuilder.Entity("Phoneden.Entities.SaleOrderReturn", b =>
          {
            b.HasOne("Phoneden.Entities.Product", "Product")
                      .WithMany()
                      .HasForeignKey("ProductId")
                      .HasConstraintName("fk_sale_order_returns_products_product_id")
                      .OnDelete(DeleteBehavior.Cascade);

            b.HasOne("Phoneden.Entities.SaleOrderInvoice", "SaleOrderInvoice")
                      .WithMany("Returns")
                      .HasForeignKey("SaleOrderInvoiceId")
                      .HasConstraintName("fk_sale_order_returns_sale_order_invoices_sale_order_invoice_id")
                      .OnDelete(DeleteBehavior.Cascade);
          });
#pragma warning restore 612, 618
    }
  }
}
